---
AWSTemplateFormatVersion: 2010-09-09

Description: >
  VPC template for DAT406 workshop - Creates VPC with public/private subnets, NAT Gateway, and S3 endpoint

Parameters:
  TemplateName:
    Type: String
    Default: genai-dat-406-labs
    Description: Name used for different elements created.

  VpcName:
    Default: APGPGVectorWorkshopDAT406
    Type: String

  VpcCIDR:
    Default: 10.215.0.0/16
    Type: String

  PublicSubnetACidr:
    Default: 10.215.10.0/24
    Type: String

  PublicSubnetBCidr:
    Default: 10.215.20.0/24
    Type: String

  PrivateSubnetACidr:
    Default: 10.215.30.0/24
    Type: String

  PrivateSubnetBCidr:
    Default: 10.215.40.0/24
    Type: String

Resources:
  MainVPC:
    Type: AWS::EC2::VPC
    Properties:
      EnableDnsSupport: true
      EnableDnsHostnames: true
      InstanceTenancy: default
      CidrBlock: !Ref VpcCIDR
      Tags:
        - Key: Name
          Value: !Ref VpcName

  InternetGateway:
    Type: AWS::EC2::InternetGateway
    DependsOn: MainVPC
    Properties:
      Tags:
        - Key: Name
          Value: !Sub ${TemplateName}-igw

  AttachIGW:
    Type: AWS::EC2::VPCGatewayAttachment
    Properties:
      VpcId: !Ref MainVPC
      InternetGatewayId: !Ref InternetGateway

  PublicSubnetA:
    Type: AWS::EC2::Subnet
    Properties:
      VpcId: !Ref MainVPC
      CidrBlock: !Ref PublicSubnetACidr
      AvailabilityZone: !Select [0, !GetAZs '']  # Fixed: Added empty string
      MapPublicIpOnLaunch: true
      Tags:
        - Key: Name
          Value: !Sub ${TemplateName}-PublicA

  PublicSubnetB:
    Type: AWS::EC2::Subnet
    Properties:
      VpcId: !Ref MainVPC
      CidrBlock: !Ref PublicSubnetBCidr
      AvailabilityZone: !Select [1, !GetAZs '']  # Fixed: Added empty string
      MapPublicIpOnLaunch: true
      Tags:
        - Key: Name
          Value: !Sub ${TemplateName}-PublicB

  PrivateSubnetA:
    Type: AWS::EC2::Subnet
    Properties:
      VpcId: !Ref MainVPC
      CidrBlock: !Ref PrivateSubnetACidr
      AvailabilityZone: !Select [0, !GetAZs '']  # Fixed: Added empty string
      Tags:
        - Key: Name
          Value: !Sub ${TemplateName}-PrivateA

  PrivateSubnetB:
    Type: AWS::EC2::Subnet
    Properties:
      VpcId: !Ref MainVPC
      CidrBlock: !Ref PrivateSubnetBCidr
      AvailabilityZone: !Select [1, !GetAZs '']  # Fixed: Added empty string
      Tags:
        - Key: Name
          Value: !Sub ${TemplateName}-PrivateB

  PublicRouteTable:
    Type: AWS::EC2::RouteTable
    Properties:
      VpcId: !Ref MainVPC
      Tags:
        - Key: Name
          Value: !Sub ${TemplateName}-public-rtb

  PublicRouteToIGW:
    Type: AWS::EC2::Route
    DependsOn: AttachIGW
    Properties:
      RouteTableId: !Ref PublicRouteTable
      DestinationCidrBlock: 0.0.0.0/0
      GatewayId: !Ref InternetGateway

  PrivateRouteTable:
    Type: AWS::EC2::RouteTable
    Properties:
      VpcId: !Ref MainVPC
      Tags:
        - Key: Name
          Value: !Sub ${TemplateName}-private-rtb

  PrivateRoute:
    Type: AWS::EC2::Route
    Properties:
      RouteTableId: !Ref PrivateRouteTable
      DestinationCidrBlock: 0.0.0.0/0
      NatGatewayId: !Ref NATGateway

  PublicSubnetARouteTableAssociation:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      SubnetId: !Ref PublicSubnetA
      RouteTableId: !Ref PublicRouteTable

  PublicSubnetBRouteTableAssociation:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      SubnetId: !Ref PublicSubnetB
      RouteTableId: !Ref PublicRouteTable

  PrivateSubnetARouteTableAssociation:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      SubnetId: !Ref PrivateSubnetA
      RouteTableId: !Ref PrivateRouteTable

  PrivateSubnetBRouteTableAssociation:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      SubnetId: !Ref PrivateSubnetB
      RouteTableId: !Ref PrivateRouteTable

  NATGateway:
    Type: AWS::EC2::NatGateway
    Properties:
      AllocationId: !GetAtt ElasticIPAddress.AllocationId
      SubnetId: !Ref PublicSubnetA
      Tags:
        - Key: Name
          Value: !Sub ${TemplateName}-NATGW

  ElasticIPAddress:
    Type: AWS::EC2::EIP
    Properties:
      Domain: vpc

  S3GatewayEndpoint:
    Type: AWS::EC2::VPCEndpoint
    Properties:
      VpcEndpointType: Gateway
      VpcId: !Ref MainVPC
      ServiceName: !Sub 'com.amazonaws.${AWS::Region}.s3'
      PolicyDocument:
        Version: 2012-10-17
        Statement:
          - Effect: Allow
            Principal: '*'
            Action: '*'
            Resource: '*'
      RouteTableIds:
        - !Ref PrivateRouteTable
        - !Ref PublicRouteTable

Outputs:
  VPC:
    Description: VPC ID
    Value: !Ref MainVPC
    Export:
      Name: !Sub "${AWS::Region}-${AWS::StackName}-MainVPC"

  PublicSubnetA:
    Description: PublicSubnetA ID
    Value: !Ref PublicSubnetA
    Export:
      Name: !Sub "${AWS::Region}-${AWS::StackName}-PublicSubnetA"

  PublicSubnetB:
    Description: PublicSubnetB ID
    Value: !Ref PublicSubnetB
    Export:
      Name: !Sub "${AWS::Region}-${AWS::StackName}-PublicSubnetB"

  PrivateSubnetA:
    Description: PrivateSubnetA ID
    Value: !Ref PrivateSubnetA
    Export:
      Name: !Sub "${AWS::Region}-${AWS::StackName}-PrivateSubnetA"

  PrivateSubnetB:
    Description: PrivateSubnetB ID
    Value: !Ref PrivateSubnetB
    Export:
      Name: !Sub "${AWS::Region}-${AWS::StackName}-PrivateSubnetB"

  PrivateSubnets:
    Description: Private Subnets
    Value: !Join [',', [!Ref PrivateSubnetA, !Ref PrivateSubnetB]]
    Export:
      Name: !Sub '${AWS::StackName}-SubnetsPrivate'

  PublicSubnets:
    Description: Public Subnets
    Value: !Join [',', [!Ref PublicSubnetA, !Ref PublicSubnetB]]
    Export:
      Name: !Sub '${AWS::StackName}-SubnetsPublic'

  PrivateRouteTable:
    Description: Private Route Table
    Value: !Ref PrivateRouteTable
    Export:
      Name: !Sub '${AWS::StackName}-PrivateRouteTable'

  PublicRouteTable:
    Description: Public Route Table
    Value: !Ref PublicRouteTable
    Export:
      Name: !Sub '${AWS::StackName}-PublicRouteTable'