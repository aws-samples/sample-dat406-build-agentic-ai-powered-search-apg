---
AWSTemplateFormatVersion: 2010-09-09

Description: >
  Aurora PostgreSQL 17.5 template for DAT406 workshop - Creates Aurora cluster with pgvector extension for Strands SDK

Parameters:
  TemplateName:
    Type: String
    Default: genai-dat-406-labs
    Description: Name used for different elements created.

  VPC:
    Type: String

  VpcCIDR:
    Type: String

  PrivateSubnets:
    Type: String

  DBVersion:
    Type: String
    Default: "17"

  DBInstanceSize:
    Type: String
    Default: db.r6gd.4xlarge

  DBPort:
    Type: Number
    Default: 5432

  AssetsBucketName:
    Type: String

  AssetsBucketPrefix:
    Type: String
    
  RDSVersionLambdaFunction:
    Type: String
    Description: Lambda function ARN for RDS version lookup

Resources:
  RoleEnhancedMonitoring:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: 2012-10-17
        Statement:
          - Effect: Allow
            Action:
              - sts:AssumeRole
            Principal:
              Service:
                - monitoring.rds.amazonaws.com
      ManagedPolicyArns:
        - arn:aws:iam::aws:policy/service-role/AmazonRDSEnhancedMonitoringRole

  EncryptionKey:
    DeletionPolicy: Delete
    UpdateReplacePolicy: Delete
    Type: AWS::KMS::Key
    Properties:
      EnableKeyRotation: true
      KeyPolicy:
        Version: 2012-10-17
        Id: !Ref AWS::StackName
        Statement:
          - Effect: Allow
            Principal:
              AWS:
                - !Sub "arn:aws:iam::${AWS::AccountId}:root"
            Action: "kms:*"
            Resource: "*"
      Tags:
        - Key: Name
          Value: !Ref AWS::StackName

  EncryptionKeyAlias:
    Type: AWS::KMS::Alias
    Properties:
      AliasName: !Sub "alias/${AWS::StackName}"
      TargetKeyId: !Ref EncryptionKey

  DBSubnetGroup:
    Type: AWS::RDS::DBSubnetGroup
    Properties:
      DBSubnetGroupDescription: "RDS DB Subnet Group"
      SubnetIds: !Split [',', !Ref PrivateSubnets]

  APGCustomClusterParamGroup:
    Type: AWS::RDS::DBClusterParameterGroup
    Properties:
      Description: "Aurora PostgreSQL 17 Custom Cluster parameter group"
      Family: aurora-postgresql17
      Parameters:
        shared_preload_libraries: "pg_stat_statements"
      Tags:
        - Key: Name
          Value: !Sub "${AWS::StackName}-clusterparamgroup"

  APGCustomDBParamGroup:
    Type: AWS::RDS::DBParameterGroup
    Properties:
      Description: !Sub ${AWS::StackName}-dbparamgroup
      Family: aurora-postgresql17
      Parameters:
        log_rotation_age: "1440"
        log_rotation_size: "102400"
      Tags:
        - Key: Name
          Value: !Sub ${AWS::StackName}-dbparamgroup

  VPCSecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupDescription: !Ref AWS::StackName
      SecurityGroupEgress:
        - IpProtocol: -1
          CidrIp: "0.0.0.0/0"
      SecurityGroupIngress:
        - IpProtocol: tcp
          FromPort: !Ref DBPort
          ToPort: !Ref DBPort
          CidrIp: !Ref VpcCIDR
          Description: 'Access from VPC'
      VpcId: !Ref VPC
      Tags:
        - Key: Name
          Value: !Sub '${AWS::StackName}-DBSecurityGroup'

  RDSSecrets:
    Type: AWS::SecretsManager::Secret
    DeletionPolicy: Delete
    UpdateReplacePolicy: Delete
    Properties:
      Name: !Sub "apg-pgvector-secret-dat406"
      Description: 'Aurora cluster credentials'
      GenerateSecretString:
        SecretStringTemplate: '{"username": "postgres", "database": "postgres"}'
        GenerateStringKey: 'password'
        PasswordLength: 16
        ExcludePunctuation: true

  # Get Aurora PostgreSQL 17.5 version
  APGDBVersion:
    Type: Custom::Variable
    Properties:
      ServiceToken: !Ref RDSVersionLambdaFunction
      Engine: aurora-postgresql
      EngineMajorVersion: !Ref DBVersion

  DBCluster:
    Type: AWS::RDS::DBCluster
    DeletionPolicy: Delete
    UpdateReplacePolicy: Delete
    Properties:
      DBClusterIdentifier: !Sub "apg-pgvector-dat406"
      Engine: aurora-postgresql
      Port: !Ref DBPort
      MasterUsername: !Join ['', ['{{resolve:secretsmanager:', !Ref RDSSecrets, ':SecretString:username}}']]
      MasterUserPassword: !Join ['', ['{{resolve:secretsmanager:', !Ref RDSSecrets, ':SecretString:password}}']]
      DBClusterParameterGroupName: !Ref APGCustomClusterParamGroup
      DBSubnetGroupName: !Ref DBSubnetGroup
      AutoMinorVersionUpgrade: false
      EnableHttpEndpoint: true
      EngineVersion: !GetAtt APGDBVersion.EngineVersion  # This will be 17.5
      KmsKeyId: !Ref EncryptionKey
      StorageEncrypted: true
      StorageType: aurora-iopt1
      BackupRetentionPeriod: 7
      DeletionProtection: false
      VpcSecurityGroupIds: [!Ref VPCSecurityGroup]
      Tags:
        - Key: Name
          Value: !Sub "${AWS::StackName}"
        - Key: PostgreSQLVersion
          Value: !GetAtt APGDBVersion.EngineVersion

  DBNodeWriter:
    Type: AWS::RDS::DBInstance
    DeletionPolicy: Delete
    UpdateReplacePolicy: Delete
    Properties:
      DBClusterIdentifier: !Ref DBCluster
      DBInstanceIdentifier: !Sub ${AWS::StackName}-node-01
      DBInstanceClass: !Ref DBInstanceSize
      DBParameterGroupName: !Ref APGCustomDBParamGroup
      Engine: aurora-postgresql
      MonitoringInterval: 1
      MonitoringRoleArn: !GetAtt RoleEnhancedMonitoring.Arn
      PubliclyAccessible: false
      EnablePerformanceInsights: true
      PerformanceInsightsRetentionPeriod: 7
      AutoMinorVersionUpgrade: false
      Tags:
        - Key: Name
          Value: !Sub ${AWS::StackName}-node-01

  SecretPostgreSQLAttachment:
    Type: AWS::SecretsManager::SecretTargetAttachment
    Properties:
      SecretId: !Ref RDSSecrets
      TargetId: !Ref DBCluster
      TargetType: AWS::RDS::DBCluster

  # Bootstrap resources
  PsycopgLayer:
    Type: AWS::Lambda::LayerVersion
    Properties:
      LayerName: psycopg-layer-dat406
      Description: Psycopg layer with binary and pool extensions for Python 3.13
      Content:
        S3Bucket: !Ref AssetsBucketName
        S3Key: !Sub "${AssetsBucketPrefix}psycopg-layer.zip"
      CompatibleRuntimes:
        - python3.13

  LambdaSecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupDescription: Security group for Lambda functions
      VpcId: !Ref VPC
      SecurityGroupIngress:
        - IpProtocol: tcp
          FromPort: 443
          ToPort: 443
          CidrIp: !Ref VpcCIDR
      SecurityGroupEgress:
        - IpProtocol: "-1"
          CidrIp: "0.0.0.0/0"

  LambdaBootstrapRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Statement:
          - Effect: Allow
            Principal:
              Service:
                - lambda.amazonaws.com
            Action:
              - sts:AssumeRole
      ManagedPolicyArns:
        - "arn:aws:iam::aws:policy/service-role/AWSLambdaVPCAccessExecutionRole"
        - "arn:aws:iam::aws:policy/SecretsManagerReadWrite"
      Policies:
        - PolicyName: LambdaRDSAccess
          PolicyDocument:
            Version: "2012-10-17"
            Statement:
              - Effect: Allow
                Action:
                  - rds-data:ExecuteStatement
                  - secretsmanager:GetSecretValue
                  - logs:CreateLogGroup
                  - logs:CreateLogStream
                  - logs:PutLogEvents
                Resource: "*"

  DBInitializationFunction:
    Type: AWS::Lambda::Function
    Properties:
      Description: Initialize Aurora PostgreSQL 17.5 with pgvector for Strands SDK
      Layers:
        - !Ref PsycopgLayer
      Handler: index.lambda_handler
      Role: !GetAtt LambdaBootstrapRole.Arn
      Runtime: python3.13
      MemorySize: 2048
      Timeout: 900
      Environment:
        Variables:
          DBSECRET: !Ref RDSSecrets
      VpcConfig:
        SecurityGroupIds:
          - !Ref LambdaSecurityGroup
        SubnetIds: !Split [',', !Ref PrivateSubnets]
      Code:
        ZipFile: |
          import asyncio
          import boto3
          import psycopg
          import logging
          import cfnresponse
          import json

          logger = logging.getLogger()
          logger.setLevel(logging.INFO)

          async def initialize_database(secret_dict):
              host = secret_dict['host']
              user = secret_dict['username']
              password = secret_dict['password']
              dbname = secret_dict.get('dbname', 'postgres')

              max_attempts = 30
              for attempt in range(max_attempts):
                  try:
                      async with await psycopg.AsyncConnection.connect(
                          host=host,
                          user=user,
                          password=password,
                          dbname=dbname,
                          connect_timeout=10
                      ) as aconn:
                          async with aconn.cursor() as acur:
                              # Show PostgreSQL version
                              await acur.execute("SELECT version();")
                              version = await acur.fetchone()
                              logger.info(f"Connected to: {version[0]}")
                              
                              # Create schema and extension for Strands SDK
                              await acur.execute("CREATE SCHEMA IF NOT EXISTS bedrock_integration;")
                              await acur.execute("CREATE EXTENSION IF NOT EXISTS vector;")
                              
                              await aconn.commit()

                              # Verify pgvector extension
                              await acur.execute("SELECT * FROM pg_extension WHERE extname = 'vector';")
                              vector_ext = await acur.fetchone()
                              if vector_ext:
                                  logger.info(f"pgvector extension installed successfully")
                              
                              logger.info("Database initialized for Strands SDK")
                              return True
                              
                  except psycopg.Error as e:
                      logger.warning(f"Attempt {attempt + 1}/{max_attempts} failed: {str(e)}")
                      if attempt < max_attempts - 1:
                          await asyncio.sleep(10)
                      else:
                          logger.error("Max attempts reached. Unable to initialize database.")
                          return False

          def lambda_handler(event, context):
              logger.info('Starting lambda_handler for Aurora PostgreSQL 17.5 with Strands SDK')
              logger.info(f"Received event: {event}")

              try:
                  if event['RequestType'] in ['Create', 'Update']:
                      secret_name = event['ResourceProperties']['DBSecret']
                      secret_client = boto3.client('secretsmanager')
                      secret = secret_client.get_secret_value(SecretId=secret_name)
                      secret_dict = json.loads(secret['SecretString'])

                      success = asyncio.get_event_loop().run_until_complete(initialize_database(secret_dict))
                      if success:
                          cfnresponse.send(event, context, cfnresponse.SUCCESS, {"Message": "Database initialized with pgvector for Strands SDK"})
                      else:
                          cfnresponse.send(event, context, cfnresponse.FAILED, {"Message": "Database initialization failed"})
                  elif event['RequestType'] == 'Delete':
                      cfnresponse.send(event, context, cfnresponse.SUCCESS, {"Message": "No action needed for Delete"})
                  else:
                      cfnresponse.send(event, context, cfnresponse.FAILED, {"Message": f"Unsupported request type: {event['RequestType']}"})
              except Exception as e:
                  logger.error(f"Error in lambda_handler: {str(e)}")
                  cfnresponse.send(event, context, cfnresponse.FAILED, {"Message": f"Error: {str(e)}"})

  DBInitialization:
    Type: Custom::DBInitialization
    DependsOn:
      - DBNodeWriter
    Properties:
      ServiceToken: !GetAtt DBInitializationFunction.Arn
      DBSecret: !Ref RDSSecrets

  # Aurora Bedrock Role (for Bedrock embedding model access)
  AuroraBedrockRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: "2012-10-17"
        Statement:
          - Effect: "Allow"
            Principal:
              Service:
                - "rds.amazonaws.com"
            Action:
              - "sts:AssumeRole"
      Path: "/"
      Policies:
        - PolicyName: "Aurora-Bedrock-Policy"
          PolicyDocument:
            Version: "2012-10-17"
            Statement:
              - Effect: "Allow"
                Action:
                  - "bedrock:InvokeModel"
                Resource:
                  - !Sub "arn:aws:bedrock:*:${AWS::AccountId}:provisioned-model/*"
                  - "arn:aws:bedrock:*::foundation-model/*"

Outputs:
  RDSSecrets:
    Description: Secrets for Aurora PostgreSQL
    Value: !Ref RDSSecrets
    Export:
      Name: !Sub "${AWS::Region}-${AWS::StackName}-RDSSecrets"

  APGCluster:
    Description: Aurora PostgreSQL cluster name
    Value: !Ref DBCluster
    Export:
      Name: !Sub "${AWS::Region}-${AWS::StackName}-APGCluster"

  APGClusterEP:
    Description: Aurora PostgreSQL cluster endpoint
    Value: !GetAtt DBCluster.Endpoint.Address
    Export:
      Name: !Sub "${AWS::Region}-${AWS::StackName}-APGClusterEP"
      
  APGVersion:
    Description: Aurora PostgreSQL version
    Value: !GetAtt APGDBVersion.EngineVersion
    Export:
      Name: !Sub "${AWS::Region}-${AWS::StackName}-APGVersion"

  VPCSecurityGroup:
    Description: VPC Security Group for database
    Value: !Ref VPCSecurityGroup
    Export:
      Name: !Sub "${AWS::Region}-${AWS::StackName}-VPCSecurityGroup"

  PsycopgLayer:
    Description: Lambda Layer ARN for psycopg
    Value: !Ref PsycopgLayer
    Export:
      Name: !Sub "${AWS::Region}-${AWS::StackName}-PsycopgLayer"

  AuroraBedrockRole:
    Description: IAM Role for Aurora Bedrock integration (for embeddings)
    Value: !Ref AuroraBedrockRole
    Export:
      Name: !Sub "${AWS::Region}-${AWS::StackName}-AuroraBedrockRole"