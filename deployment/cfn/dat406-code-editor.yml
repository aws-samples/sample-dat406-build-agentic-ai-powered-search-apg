---
AWSTemplateFormatVersion: '2010-09-09'
Description: 'DAT406 - Code Editor with Two-Stage Bootstrap (SIMPLIFIED)'

Parameters:
  TemplateName:
    Type: String
    Description: Template name prefix for resources
    
  CodeEditorUser:
    Type: String
    Default: participant
    Description: Username for Code Editor
    
  InstanceName:
    Type: String
    Description: Instance name
    
  InstanceVolumeSize:
    Type: Number
    Default: 100
    Description: Volume size in GB
    MinValue: 40
    MaxValue: 500
    
  InstanceType:
    Type: String
    Default: c6g.2xlarge
    Description: EC2 instance type
    AllowedValues:
      - t4g.medium
      - t4g.large
      - t4g.xlarge
      - c6g.xlarge
      - c6g.2xlarge
      - c6g.4xlarge
    
  InstanceOperatingSystem:
    Type: String
    Default: AmazonLinux-2023
    Description: Operating system
    
  HomeFolder:
    Type: String
    Default: /workshop
    Description: Working directory
    
  RepoUrl:
    Type: String
    Default: https://github.com/aws-samples/sample-dat406-build-agentic-ai-powered-search-apg.git
    Description: GitHub repository URL
    
  EnvironmentBootstrapUrl:
    Type: String
    Default: https://raw.githubusercontent.com/aws-samples/sample-dat406-build-agentic-ai-powered-search-apg/main/deployment/bootstrap-environment.sh
    Description: URL to Stage 1 bootstrap script (Code Editor + VS Code)
    
  LabsBootstrapUrl:
    Type: String
    Default: https://raw.githubusercontent.com/aws-samples/sample-dat406-build-agentic-ai-powered-search-apg/main/deployment/bootstrap-labs.sh
    Description: URL to Stage 2 bootstrap script (Lab 1 + Lab 2)
    
  VPCId:
    Type: String
    Description: VPC ID
    
  SubnetId:
    Type: String
    Description: Subnet ID
    
  VpcCIDR:
    Type: String
    Description: VPC CIDR
    
  DBSecretArn:
    Type: String
    Description: Database secret ARN
    
  DBClusterEndpoint:
    Type: String
    Description: Database endpoint
    
  DBName:
    Type: String
    Default: postgres
    Description: Database name
    
  BedrockEmbeddingModel:
    Type: String
    Default: amazon.titan-embed-text-v2:0
    Description: Bedrock embedding model
  
  BedrockChatModel:
    Type: String
    Default: us.anthropic.claude-sonnet-4-20250514-v1:0
    Description: Bedrock chat model
    
  PythonVersion:
    Type: String
    Default: '3.13'
    Description: Python version
    
  PostgreSQLVersion:
    Type: String
    Default: '16'
    Description: PostgreSQL client version

Conditions:
  IsGraviton: !Or
    - !Equals [!Select [0, !Split ['.', !Ref InstanceType]], 't4g']
    - !Equals [!Select [0, !Split ['.', !Ref InstanceType]], 'c6g']
    - !Equals [!Select [0, !Split ['.', !Ref InstanceType]], 'm6g']
    - !Equals [!Select [0, !Split ['.', !Ref InstanceType]], 'r6g']

Mappings:
  ArmImage:
    AmazonLinux-2023:
      ImageId: '{{resolve:ssm:/aws/service/ami-amazon-linux-latest/al2023-ami-kernel-default-arm64}}'
  AmdImage:
    AmazonLinux-2023:
      ImageId: '{{resolve:ssm:/aws/service/ami-amazon-linux-latest/al2023-ami-kernel-default-x86_64}}'

Resources:
  # ==========================================
  # CODE EDITOR SECRET
  # ==========================================
  CodeEditorSecret:
    Type: AWS::SecretsManager::Secret
    DeletionPolicy: Delete
    UpdateReplacePolicy: Delete
    Properties:
      Name: !Sub
      - ${InstanceName}-${RandomGUID}
      - RandomGUID: !Select [0, !Split ['-', !Select [2, !Split ['/', !Ref AWS::StackId ]]]]
      Description: Code Editor credentials
      GenerateSecretString:
        PasswordLength: 16
        SecretStringTemplate: !Sub '{"username":"${CodeEditorUser}"}'
        GenerateStringKey: 'password'
        ExcludePunctuation: true

  # ==========================================
  # LAMBDA FOR SECRET EXTRACTION
  # ==========================================
  SecretPlaintextLambdaRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: 2012-10-17
        Statement:
          - Effect: Allow
            Principal:
              Service: lambda.amazonaws.com
            Action: sts:AssumeRole
      ManagedPolicyArns:
        - arn:aws:iam::aws:policy/service-role/AWSLambdaBasicExecutionRole
      Policies:
        - PolicyName: GetSecretValue
          PolicyDocument:
            Version: 2012-10-17
            Statement:
              - Effect: Allow
                Action: secretsmanager:GetSecretValue
                Resource: !Ref CodeEditorSecret

  SecretPlaintextLambda:
    Type: AWS::Lambda::Function
    Properties:
      Handler: index.lambda_handler
      Runtime: python3.12
      MemorySize: 128
      Timeout: 30
      Architectures:
        - arm64
      Role: !GetAtt SecretPlaintextLambdaRole.Arn
      Code:
        ZipFile: |
          import boto3
          import json
          import logging
          import urllib3
          
          logger = logging.getLogger()
          logger.setLevel(logging.INFO)
          http = urllib3.PoolManager()
          
          def send_response(event, context, response_status, response_data={}, reason=None):
              response_body = {
                  'Status': response_status,
                  'Reason': reason or f'See CloudWatch Log Stream: {context.log_stream_name}',
                  'PhysicalResourceId': event.get('PhysicalResourceId', context.log_stream_name),
                  'StackId': event['StackId'],
                  'RequestId': event['RequestId'],
                  'LogicalResourceId': event['LogicalResourceId'],
                  'Data': response_data
              }
              
              json_response = json.dumps(response_body)
              headers = {'content-type': '', 'content-length': str(len(json_response))}
              
              try:
                  http.request('PUT', event['ResponseURL'], body=json_response, headers=headers)
              except Exception as e:
                  logger.error(f"Failed to send response: {e}")
          
          def lambda_handler(event, context):
              try:
                  logger.info(f"Event: {json.dumps(event)}")
                  
                  if event['RequestType'] == 'Delete':
                      send_response(event, context, 'SUCCESS')
                      return
                  
                  secret_arn = event['ResourceProperties']['SecretArn']
                  client = boto3.client('secretsmanager')
                  response = client.get_secret_value(SecretId=secret_arn)
                  secret = json.loads(response['SecretString'])
                  
                  response_data = {
                      'username': secret.get('username', ''),
                      'password': secret.get('password', '')
                  }
                  
                  send_response(event, context, 'SUCCESS', response_data)
              except Exception as e:
                  logger.error(f"Error: {e}", exc_info=True)
                  send_response(event, context, 'FAILED', reason=str(e))

  SecretPlaintext:
    Type: Custom::SecretPlaintext
    Properties:
      ServiceToken: !GetAtt SecretPlaintextLambda.Arn
      SecretArn: !Ref CodeEditorSecret

  # ==========================================
  # SECURITY GROUP
  # ==========================================
  SecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupDescription: !Sub 'Code Editor security group for ${TemplateName}'
      VpcId: !Ref VPCId
      SecurityGroupIngress:
        - IpProtocol: tcp
          FromPort: 80
          ToPort: 80
          CidrIp: 0.0.0.0/0
          Description: HTTP from anywhere
      SecurityGroupEgress:
        - IpProtocol: tcp
          FromPort: 443
          ToPort: 443
          CidrIp: 0.0.0.0/0
          Description: HTTPS for CloudFormation signaling
        - IpProtocol: tcp
          FromPort: 80
          ToPort: 80
          CidrIp: 0.0.0.0/0
          Description: HTTP for package downloads
        - IpProtocol: tcp
          FromPort: 5432
          ToPort: 5432
          CidrIp: !Ref VpcCIDR
          Description: PostgreSQL
      Tags:
        - Key: Name
          Value: !Sub '${TemplateName}-code-editor-sg'

  # ==========================================
  # IAM ROLE
  # ==========================================
  CodeEditorRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: 2012-10-17
        Statement:
          - Effect: Allow
            Principal:
              Service: ec2.amazonaws.com
            Action: sts:AssumeRole
      ManagedPolicyArns:
        - arn:aws:iam::aws:policy/AmazonSSMManagedInstanceCore
        - arn:aws:iam::aws:policy/CloudWatchAgentServerPolicy
      Policies:
        - PolicyName: WorkshopPermissions
          PolicyDocument:
            Version: 2012-10-17
            Statement:
              - Effect: Allow
                Action:
                  - rds:*
                  - rds-db:connect
                Resource: '*'
              - Effect: Allow
                Action:
                  - secretsmanager:GetSecretValue
                  - secretsmanager:DescribeSecret
                Resource: !Ref DBSecretArn
              - Effect: Allow
                Action:
                  - bedrock:InvokeModel
                  - bedrock:InvokeModelWithResponseStream
                Resource: '*'
              - Effect: Allow
                Action:
                  - logs:CreateLogGroup
                  - logs:CreateLogStream
                  - logs:PutLogEvents
                Resource: !Sub 'arn:${AWS::Partition}:logs:${AWS::Region}:${AWS::AccountId}:log-group:/aws/*'

  CodeEditorInstanceProfile:
    Type: AWS::IAM::InstanceProfile
    Properties:
      Roles:
        - !Ref CodeEditorRole

  # ==========================================
  # CLOUDWATCH LOG GROUP
  # ==========================================
  SSMDocumentLogGroup:
    Type: AWS::Logs::LogGroup
    Properties:
      LogGroupName: !Sub '/aws/ssm/${TemplateName}-bootstrap'
      RetentionInDays: 7

  # ==========================================
  # SIMPLIFIED SSM DOCUMENT - TWO STAGE BOOTSTRAP
  # ==========================================
  CodeEditorSSMDoc:
    Type: AWS::SSM::Document
    Properties:
      DocumentType: Command
      Content:
        schemaVersion: '2.2'
        description: DAT406 Two-Stage Bootstrap (Environment + Labs)
        parameters:
          CodeEditorPassword:
            type: String
          CodeEditorUser:
            type: String
          EnvironmentBootstrapUrl:
            type: String
          LabsBootstrapUrl:
            type: String
          RepoUrl:
            type: String
          HomeFolder:
            type: String
          DBSecretArn:
            type: String
          DBClusterEndpoint:
            type: String
          DBName:
            type: String
          BedrockEmbeddingModel:
            type: String
          BedrockChatModel:
            type: String
        mainSteps:
          - name: InstallCloudWatchAgent
            action: aws:configurePackage
            inputs:
              name: AmazonCloudWatchAgent
              action: Install

          - name: RunTwoStageBootstrap
            action: aws:runShellScript
            inputs:
              timeoutSeconds: 600
              runCommand:
                - '#!/bin/bash'
                - 'set -euo pipefail'
                - 'exec > >(tee /var/log/bootstrap-main.log) 2>&1'
                - !Sub |
                  echo "========================================"
                  echo "DAT406 Two-Stage Bootstrap"
                  echo "========================================"
                  
                  # Export all parameters as environment variables
                  export CODE_EDITOR_PASSWORD="{{ CodeEditorPassword }}"
                  export CODE_EDITOR_USER="{{ CodeEditorUser }}"
                  export HOME_FOLDER="{{ HomeFolder }}"
                  export REPO_URL="{{ RepoUrl }}"
                  export DB_SECRET_ARN="{{ DBSecretArn }}"
                  export DB_CLUSTER_ENDPOINT="{{ DBClusterEndpoint }}"
                  export DB_NAME="{{ DBName }}"
                  export AWS_REGION="${AWS::Region}"
                  export BEDROCK_EMBEDDING_MODEL="{{ BedrockEmbeddingModel }}"
                  export BEDROCK_CHAT_MODEL="{{ BedrockChatModel }}"
                  export STAGE2_SCRIPT_URL="{{ LabsBootstrapUrl }}"
                  
                  # Download and run Stage 1: Environment Bootstrap
                  echo "Downloading Stage 1: Environment Bootstrap..."
                  curl -fsSL "{{ EnvironmentBootstrapUrl }}" -o /tmp/bootstrap-environment.sh
                  
                  if [ ! -f /tmp/bootstrap-environment.sh ]; then
                      echo "ERROR: Failed to download environment bootstrap script"
                      exit 1
                  fi
                  
                  chmod +x /tmp/bootstrap-environment.sh
                  echo "Executing Stage 1..."
                  
                  # Run Stage 1 (includes CloudFormation signaling + triggers Stage 2)
                  /tmp/bootstrap-environment.sh
                  
                  echo "Stage 1 complete - CloudFormation signaled"
                  echo "Stage 2 running in background - check /var/log/bootstrap-labs.log"

  # ==========================================
  # LAMBDA FOR RUNNING SSM DOCUMENT
  # ==========================================
  SSMDocLambdaRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: 2012-10-17
        Statement:
          - Effect: Allow
            Principal:
              Service: lambda.amazonaws.com
            Action: sts:AssumeRole
      ManagedPolicyArns:
        - arn:aws:iam::aws:policy/service-role/AWSLambdaBasicExecutionRole
      Policies:
        - PolicyName: SSMDocOnEC2
          PolicyDocument:
            Version: 2012-10-17
            Statement:
              - Effect: Allow
                Action:
                  - ssm:SendCommand
                  - ssm:ListCommandInvocations
                  - ssm:GetCommandInvocation
                Resource:
                  - !Sub 'arn:${AWS::Partition}:ssm:${AWS::Region}:${AWS::AccountId}:document/${CodeEditorSSMDoc}'
                  - !Sub 'arn:${AWS::Partition}:ec2:${AWS::Region}:${AWS::AccountId}:instance/*'
                  - '*'

  RunSSMDocLambda:
    Type: AWS::Lambda::Function
    Properties:
      Handler: index.lambda_handler
      Runtime: python3.12
      MemorySize: 128
      Timeout: 900
      Environment:
        Variables:
          RetrySleep: 5000
          AbortTimeRemaining: 60000
      Architectures:
        - arm64
      Role: !GetAtt SSMDocLambdaRole.Arn
      Code:
        ZipFile: |
          import boto3
          import json
          import logging
          import time
          import os
          import urllib3
          
          logger = logging.getLogger()
          logger.setLevel(logging.INFO)
          http = urllib3.PoolManager()
          
          def send_response(event, context, response_status, response_data={}, reason=None):
              response_body = {
                  'Status': response_status,
                  'Reason': reason or f'See CloudWatch Log Stream: {context.log_stream_name}',
                  'PhysicalResourceId': event.get('PhysicalResourceId', context.log_stream_name),
                  'StackId': event['StackId'],
                  'RequestId': event['RequestId'],
                  'LogicalResourceId': event['LogicalResourceId'],
                  'Data': response_data
              }
              
              json_response = json.dumps(response_body)
              headers = {'content-type': '', 'content-length': str(len(json_response))}
              
              try:
                  http.request('PUT', event['ResponseURL'], body=json_response, headers=headers)
              except Exception as e:
                  logger.error(f"Failed to send response: {e}")
          
          def lambda_handler(event, context):
              if event['RequestType'] != 'Create':
                  send_response(event, context, 'SUCCESS')
                  return
              
              sleep_ms = int(os.environ.get('RetrySleep', 5000))
              abort_ms = int(os.environ.get('AbortTimeRemaining', 60000))
              props = event['ResourceProperties']
              instance_id = props['InstanceId']
              document_name = props['DocumentName']
              log_group = props['CloudWatchLogGroupName']
              
              # Remove non-SSM parameters
              for key in ['ServiceToken', 'ServiceTimeout', 'InstanceId', 'DocumentName', 'CloudWatchLogGroupName']:
                  props.pop(key, None)
              
              parameters = {k: [v] for k, v in props.items()}
              
              ssm = boto3.client('ssm')
              retry = True
              attempt = 0
              
              while retry:
                  attempt += 1
                  time_remaining = context.get_remaining_time_in_millis()
                  logger.info(f'Attempt {attempt}, Time remaining: {time_remaining/1000}s')
                  
                  try:
                      response = ssm.send_command(
                          InstanceIds=[instance_id],
                          DocumentName=document_name,
                          CloudWatchOutputConfig={'CloudWatchLogGroupName': log_group, 'CloudWatchOutputEnabled': True},
                          Parameters=parameters
                      )
                      send_response(event, context, 'SUCCESS', {'CommandId': response['Command']['CommandId']})
                      return
                  except ssm.exceptions.InvalidInstanceId:
                      if time_remaining > abort_ms:
                          time.sleep(sleep_ms / 1000)
                      else:
                          send_response(event, context, 'FAILED', reason='Instance not ready timeout')
                          return
                  except Exception as e:
                      logger.error(e, exc_info=True)
                      send_response(event, context, 'FAILED', reason=str(e))
                      return

  # ==========================================
  # EC2 INSTANCE
  # ==========================================
  CodeEditorInstance:
    Type: AWS::EC2::Instance
    Properties:
      ImageId: !If
        - IsGraviton
        - !FindInMap [ArmImage, !Ref InstanceOperatingSystem, ImageId]
        - !FindInMap [AmdImage, !Ref InstanceOperatingSystem, ImageId]
      InstanceType: !Ref InstanceType
      BlockDeviceMappings:
        - DeviceName: /dev/xvda
          Ebs:
            VolumeSize: !Ref InstanceVolumeSize
            VolumeType: gp3
            DeleteOnTermination: true
            Encrypted: true
      SubnetId: !Ref SubnetId
      SecurityGroupIds:
        - !Ref SecurityGroup
      IamInstanceProfile: !Ref CodeEditorInstanceProfile
      Tags:
        - Key: Name
          Value: !Sub '${TemplateName}-code-editor'
        - Key: Workshop
          Value: DAT406

  # ==========================================
  # RUN SSM DOCUMENT
  # ==========================================
  RunCodeEditorSSMDoc:
    Type: Custom::RunSSMDocLambda
    DependsOn:
      - CodeEditorInstance
      - CodeEditorSSMDoc
    Properties:
      ServiceToken: !GetAtt RunSSMDocLambda.Arn
      ServiceTimeout: 900
      InstanceId: !Ref CodeEditorInstance
      DocumentName: !Ref CodeEditorSSMDoc
      CloudWatchLogGroupName: !Ref SSMDocumentLogGroup
      CodeEditorPassword: !GetAtt SecretPlaintext.password
      CodeEditorUser: !Ref CodeEditorUser
      EnvironmentBootstrapUrl: !Ref EnvironmentBootstrapUrl
      LabsBootstrapUrl: !Ref LabsBootstrapUrl
      RepoUrl: !Ref RepoUrl
      HomeFolder: !Ref HomeFolder
      DBSecretArn: !Ref DBSecretArn
      DBClusterEndpoint: !Ref DBClusterEndpoint
      DBName: !Ref DBName
      BedrockEmbeddingModel: !Ref BedrockEmbeddingModel
      BedrockChatModel: !Ref BedrockChatModel

  # ==========================================
  # CLOUDFRONT CACHE POLICY
  # ==========================================
  CodeEditorCachePolicy:
    Type: AWS::CloudFront::CachePolicy
    Properties:
      CachePolicyConfig:
        DefaultTTL: 0
        MaxTTL: 86400
        MinTTL: 0
        Name: !Sub
        - ${InstanceName}-${RandomGUID}
        - RandomGUID: !Select [0, !Split ['-', !Select [2, !Split ['/', !Ref AWS::StackId ]]]]
        ParametersInCacheKeyAndForwardedToOrigin:
          CookiesConfig:
            CookieBehavior: all
          EnableAcceptEncodingGzip: False
          HeadersConfig:
            HeaderBehavior: whitelist
            Headers:
              - Accept-Charset
              - Authorization
              - Origin
              - Accept
              - Referer
              - Host
              - Accept-Language
              - Accept-Encoding
              - Accept-Datetime
          QueryStringsConfig:
            QueryStringBehavior: all

  # ==========================================
  # CLOUDFRONT DISTRIBUTION
  # ==========================================
  CloudFrontDistribution:
    Type: AWS::CloudFront::Distribution
    DependsOn: RunCodeEditorSSMDoc
    Properties:
      DistributionConfig:
        Enabled: true
        HttpVersion: http2and3
        DefaultCacheBehavior:
          AllowedMethods: [GET, HEAD, OPTIONS, PUT, PATCH, POST, DELETE]
          CachePolicyId: !Ref CodeEditorCachePolicy
          OriginRequestPolicyId: 216adef6-5c7f-47e4-b989-5492eafa07d3
          TargetOriginId: !Sub 'origin-${AWS::StackName}'
          ViewerProtocolPolicy: allow-all
        Origins:
          - DomainName: !GetAtt CodeEditorInstance.PublicDnsName
            Id: !Sub 'origin-${AWS::StackName}'
            CustomOriginConfig:
              OriginProtocolPolicy: http-only
              OriginReadTimeout: 60
              OriginKeepaliveTimeout: 5

# ==========================================
# OUTPUTS
# ==========================================
Outputs:
  URL:
    Description: Code Editor URL
    Value: !Sub 'https://${CloudFrontDistribution.DomainName}/?folder=${HomeFolder}&tkn=${SecretPlaintext.password}'
    
  Username:
    Description: Username
    Value: !GetAtt SecretPlaintext.username
    
  Password:
    Description: Password
    Value: !GetAtt SecretPlaintext.password
    
  CloudFrontURL:
    Description: CloudFront base URL
    Value: !Sub 'https://${CloudFrontDistribution.DomainName}'
    
  InstanceId:
    Description: EC2 Instance ID
    Value: !Ref CodeEditorInstance
    
  BootstrapLogs:
    Description: CloudWatch Logs
    Value: !Sub 'https://console.aws.amazon.com/cloudwatch/home?region=${AWS::Region}#logsV2:log-groups/log-group/${SSMDocumentLogGroup}'
    
  Stage1Log:
    Description: Stage 1 bootstrap log on instance
    Value: /var/log/bootstrap-main.log
    
  Stage2Log:
    Description: Stage 2 bootstrap log on instance
    Value: /var/log/bootstrap-labs.log